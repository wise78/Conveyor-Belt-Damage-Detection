# -*- coding: utf-8 -*-
"""polygon_to_box.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hEQn8K94GN5c9uHTQGyINlKBKph0P_HP

# üîÑ YOLO11 Polygon to Bounding Box Converter
## Mengkonversi Dataset YOLO11 dengan Label Polygon menjadi Object Detection

Notebook ini akan mengkonversi dataset YOLO11 yang memiliki label polygon (instance segmentation) menjadi format object detection biasa dengan bounding box.

---
**Fitur:**
- ‚úÖ Konversi otomatis polygon ‚Üí bounding box
- ‚úÖ Support multiple image formats (JPG, PNG, BMP, TIFF)
- ‚úÖ Validasi data dan error handling
- ‚úÖ Statistik konversi detail
- ‚úÖ Visualisasi hasil konversi
- ‚úÖ Download hasil konversi

## üì¶ Install Dependencies
"""

# Install required packages
!pip install -q ultralytics opencv-python-headless pillow tqdm pyyaml matplotlib

print("‚úÖ All dependencies installed successfully!")

"""## ÔøΩÔøΩ Import Libraries"""

import os
import cv2
import numpy as np
from pathlib import Path
import shutil
from tqdm.notebook import tqdm
import yaml
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from google.colab import files
import zipfile
from PIL import Image
import random

print("‚úÖ All libraries imported successfully!")

"""## üîß Polygon to BBox Converter Class"""

class PolygonToBBoxConverter:
    def __init__(self, dataset_path, output_path=None):
        """
        Initialize converter

        Args:
            dataset_path (str): Path ke dataset YOLO11 dengan polygon labels
            output_path (str): Path untuk output dataset (optional)
        """
        self.dataset_path = Path(dataset_path)
        self.output_path = Path(output_path) if output_path else self.dataset_path.parent / f"{self.dataset_path.name}_bbox"

        # Buat output directory
        self.output_path.mkdir(parents=True, exist_ok=True)

        # Statistik konversi
        self.stats = {
            'total_images': 0,
            'total_labels': 0,
            'converted_labels': 0,
            'skipped_labels': 0,
            'errors': 0
        }

        print(f"üîÑ Polygon to BBox Converter")
        print(f"üìÅ Input: {self.dataset_path}")
        print(f"üìÅ Output: {self.output_path}")

    def polygon_to_bbox(self, polygon_points, img_width, img_height):
        """
        Konversi polygon points menjadi bounding box (x_center, y_center, width, height)

        Args:
            polygon_points (list): List of [x1, y1, x2, y2, ...] coordinates (normalized)
            img_width (int): Image width
            img_height (int): Image height

        Returns:
            tuple: (x_center, y_center, width, height) in normalized coordinates
        """
        try:
            # Convert normalized coordinates to pixel coordinates
            points = []
            for i in range(0, len(polygon_points), 2):
                x = polygon_points[i] * img_width
                y = polygon_points[i + 1] * img_height
                points.append([x, y])

            points = np.array(points, dtype=np.float32)

            # Calculate bounding box
            x_min = np.min(points[:, 0])
            y_min = np.min(points[:, 1])
            x_max = np.max(points[:, 0])
            y_max = np.max(points[:, 1])

            # Convert back to normalized coordinates
            x_center = (x_min + x_max) / 2 / img_width
            y_center = (y_min + y_max) / 2 / img_height
            width = (x_max - x_min) / img_width
            height = (y_max - y_min) / img_height

            # Ensure coordinates are within [0, 1]
            x_center = np.clip(x_center, 0, 1)
            y_center = np.clip(y_center, 0, 1)
            width = np.clip(width, 0, 1)
            height = np.clip(height, 0, 1)

            return x_center, y_center, width, height

        except Exception as e:
            print(f"‚ö†Ô∏è Error converting polygon: {e}")
            return None

    def convert_label_file(self, label_path, img_path):
        """
        Konversi satu file label dari polygon ke bounding box

        Args:
            label_path (Path): Path ke file label
            img_path (Path): Path ke file image

        Returns:
            list: List of converted labels in YOLO format
        """
        try:
            # Baca image untuk mendapatkan dimensi
            img = cv2.imread(str(img_path))
            if img is None:
                print(f"‚ö†Ô∏è Cannot read image: {img_path}")
                return []

            img_height, img_width = img.shape[:2]

            # Baca label file
            with open(label_path, 'r') as f:
                lines = f.readlines()

            converted_labels = []

            for line in lines:
                line = line.strip()
                if not line:
                    continue

                parts = line.split()
                if len(parts) < 3:  # Minimal: class_id + 2 coordinates
                    continue

                try:
                    class_id = int(parts[0])
                    polygon_points = [float(x) for x in parts[1:]]

                    # Validasi jumlah points (harus genap untuk x,y pairs)
                    if len(polygon_points) % 2 != 0 or len(polygon_points) < 6:
                        print(f"‚ö†Ô∏è Invalid polygon in {label_path}: {line}")
                        self.stats['skipped_labels'] += 1
                        continue

                    # Konversi polygon ke bounding box
                    bbox = self.polygon_to_bbox(polygon_points, img_width, img_height)

                    if bbox is not None:
                        x_center, y_center, width, height = bbox
                        converted_labels.append(f"{class_id} {x_center:.6f} {y_center:.6f} {width:.6f} {height:.6f}")
                        self.stats['converted_labels'] += 1
                    else:
                        self.stats['skipped_labels'] += 1

                except Exception as e:
                    print(f"‚ö†Ô∏è Error processing line in {label_path}: {line} - {e}")
                    self.stats['skipped_labels'] += 1
                    continue

            return converted_labels

        except Exception as e:
            print(f"‚ùå Error converting {label_path}: {e}")
            self.stats['errors'] += 1
            return []

    def copy_images(self, src_dir, dst_dir):
        """Copy images dari source ke destination"""
        src_path = Path(src_dir)
        dst_path = Path(dst_dir)
        dst_path.mkdir(parents=True, exist_ok=True)

        # Copy semua image files
        image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
        for ext in image_extensions:
            for img_file in src_path.glob(f"*{ext}"):
                shutil.copy2(img_file, dst_path)
                self.stats['total_images'] += 1

    def convert_dataset(self):
        """Konversi seluruh dataset"""
        print("\nüîÑ Starting conversion...")

        # Struktur dataset yang diharapkan
        splits = ['train', 'valid', 'test']

        for split in splits:
            split_input = self.dataset_path / split
            split_output = self.output_path / split

            if not split_input.exists():
                print(f"‚ö†Ô∏è Split {split} not found, skipping...")
                continue

            print(f"\nÔøΩÔøΩ Processing {split} split...")

            # Buat output directories
            (split_output / 'images').mkdir(parents=True, exist_ok=True)
            (split_output / 'labels').mkdir(parents=True, exist_ok=True)

            # Copy images
            images_input = split_input / 'images'
            images_output = split_output / 'images'

            if images_input.exists():
                print(f"üì∏ Copying images...")
                self.copy_images(images_input, images_output)

            # Convert labels
            labels_input = split_input / 'labels'
            if labels_input.exists():
                print(f"ÔøΩÔøΩÔ∏è Converting labels...")
                label_files = list(labels_input.glob("*.txt"))

                for label_file in tqdm(label_files, desc=f"Converting {split} labels"):
                    # Cari corresponding image
                    img_name = label_file.stem
                    img_file = None

                    # Cari image dengan berbagai extension
                    for ext in ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']:
                        potential_img = images_input / f"{img_name}{ext}"
                        if potential_img.exists():
                            img_file = potential_img
                            break

                    if img_file is None:
                        print(f"‚ö†Ô∏è No image found for {label_file}")
                        continue

                    # Convert label
                    converted_labels = self.convert_label_file(label_file, img_file)

                    # Write converted labels
                    if converted_labels:
                        output_label = split_output / 'labels' / f"{img_name}.txt"
                        with open(output_label, 'w') as f:
                            f.write('\n'.join(converted_labels))

                    self.stats['total_labels'] += 1

        # Copy data.yaml jika ada
        yaml_input = self.dataset_path / 'data.yaml'
        if yaml_input.exists():
            print(f"üìã Copying data.yaml...")
            shutil.copy2(yaml_input, self.output_path)

        self.print_stats()

    def print_stats(self):
        """Print statistik konversi"""
        print(f"\nÔøΩÔøΩ CONVERSION STATISTICS:")
        print(f"=" * 50)
        print(f"üì∏ Total Images: {self.stats['total_images']}")
        print(f"üè∑Ô∏è Total Labels: {self.stats['total_labels']}")
        print(f"‚úÖ Converted Labels: {self.stats['converted_labels']}")
        print(f"‚ö†Ô∏è Skipped Labels: {self.stats['skipped_labels']}")
        print(f"‚ùå Errors: {self.stats['errors']}")

        if self.stats['total_labels'] > 0:
            success_rate = (self.stats['converted_labels'] / self.stats['total_labels']) * 100
            print(f"üìà Success Rate: {success_rate:.1f}%")

        print(f"\n‚úÖ Conversion completed!")
        print(f"üìÅ Output dataset: {self.output_path}")

    def validate_conversion(self):
        """Validasi hasil konversi"""
        print(f"\nüîç Validating conversion...")

        # Cek struktur output
        required_dirs = ['train/images', 'train/labels', 'valid/images', 'valid/labels']
        for dir_path in required_dirs:
            full_path = self.output_path / dir_path
            if full_path.exists():
                file_count = len(list(full_path.glob("*")))
                print(f"‚úÖ {dir_path}: {file_count} files")
            else:
                print(f"‚ùå {dir_path}: Missing")

        # Cek sample labels
        sample_label = None
        for split in ['train', 'valid']:
            labels_dir = self.output_path / split / 'labels'
            if labels_dir.exists():
                label_files = list(labels_dir.glob("*.txt"))
                if label_files:
                    sample_label = label_files[0]
                    break

        if sample_label:
            print(f"\nüìù Sample converted label ({sample_label.name}):")
            with open(sample_label, 'r') as f:
                lines = f.readlines()
                for i, line in enumerate(lines[:3]):  # Show first 3 lines
                    print(f"   Line {i+1}: {line.strip()}")
                if len(lines) > 3:
                    print(f"   ... and {len(lines)-3} more lines")

print("‚úÖ Converter class loaded!")

"""## üì§ Upload Dataset

Upload dataset ZIP file yang berisi struktur YOLO11 dengan polygon labels
"""

# Upload dataset ZIP file
print("ÔøΩÔøΩ Please upload your dataset ZIP file:")
uploaded = files.upload()

if not uploaded:
    print("‚ùå No file uploaded!")
else:
    # Get the uploaded file
    zip_filename = list(uploaded.keys())[0]
    print(f"‚úÖ Uploaded: {zip_filename}")

    # Extract the dataset
    dataset_dir = "/content/dataset"
    os.makedirs(dataset_dir, exist_ok=True)

    print(f"üìÅ Extracting to: {dataset_dir}")
    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
        zip_ref.extractall(dataset_dir)

    # Check if we need to move files from subdirectory
    extracted_items = os.listdir(dataset_dir)
    if len(extracted_items) == 1 and os.path.isdir(os.path.join(dataset_dir, extracted_items[0])):
        # Move files from subdirectory to main directory
        subdir = os.path.join(dataset_dir, extracted_items[0])
        for item in os.listdir(subdir):
            shutil.move(os.path.join(subdir, item), dataset_dir)
        os.rmdir(subdir)

    print("‚úÖ Dataset extracted successfully!")

"""## üîç Check Dataset Structure"""

# Check dataset structure
dataset_path = "/content/dataset"
print(f"üìÇ Dataset structure in {dataset_path}:")

def print_tree(path, prefix="", max_depth=3, current_depth=0):
    if current_depth >= max_depth:
        return

    try:
        items = sorted(os.listdir(path))
        for i, item in enumerate(items):
            item_path = os.path.join(path, item)
            is_last = i == len(items) - 1

            if os.path.isdir(item_path):
                print(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{item}/")
                if current_depth < max_depth - 1:
                    new_prefix = prefix + ('    ' if is_last else '‚îÇ   ')
                    print_tree(item_path, new_prefix, max_depth, current_depth + 1)
            else:
                print(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{item}")
    except Exception as e:
        print(f"Error reading {path}: {e}")

print_tree(dataset_path)

# Check for polygon labels
print("\nüîç Checking for polygon labels...")
polygon_found = False
for split in ['train', 'valid', 'test']:
    labels_dir = os.path.join(dataset_path, split, 'labels')
    if os.path.exists(labels_dir):
        label_files = [f for f in os.listdir(labels_dir) if f.endswith('.txt')]
        if label_files:
            # Check first label file for polygon format
            sample_label = os.path.join(labels_dir, label_files[0])
            with open(sample_label, 'r') as f:
                first_line = f.readline().strip()
                parts = first_line.split()
                if len(parts) > 5:  # More than 5 parts indicates polygon
                    print(f"‚úÖ Found polygon labels in {split}/labels/ ({len(label_files)} files)")
                    print(f"   Sample: {first_line}")
                    polygon_found = True
                else:
                    print(f"‚ö†Ô∏è Found bbox labels in {split}/labels/ ({len(label_files)} files)")
                    print(f"   Sample: {first_line}")

if not polygon_found:
    print("‚ö†Ô∏è No polygon labels found! Please check your dataset format.")

"""## ÔøΩÔøΩ Run Conversion"""

# Initialize converter
converter = PolygonToBBoxConverter(dataset_path, "/content/dataset_converted")

# Run conversion
converter.convert_dataset()

"""## ‚úÖ Validate Results"""

# Validate conversion results
converter.validate_conversion()

# Show comparison
print("\nüìä Before vs After Comparison:")
print("=" * 50)

# Find sample files for comparison
sample_label = None
for split in ['train', 'valid']:
    labels_dir = os.path.join(dataset_path, split, 'labels')
    if os.path.exists(labels_dir):
        label_files = [f for f in os.listdir(labels_dir) if f.endswith('.txt')]
        if label_files:
            sample_label = os.path.join(labels_dir, label_files[0])
            break

if sample_label:
    print(f"\nüìù Original polygon label ({os.path.basename(sample_label)}):")
    with open(sample_label, 'r') as f:
        lines = f.readlines()
        for i, line in enumerate(lines[:2]):
            print(f"   {line.strip()}")

    # Show converted version
    converted_label = sample_label.replace('/dataset/', '/dataset_converted/')
    if os.path.exists(converted_label):
        print(f"\nüìù Converted bbox label ({os.path.basename(converted_label)}):")
        with open(converted_label, 'r') as f:
            lines = f.readlines()
            for i, line in enumerate(lines[:2]):
                print(f"   {line.strip()}")

"""## üé® Visualize Conversion Results"""

def visualize_conversion(original_dataset, converted_dataset, num_samples=3):
    """Visualize conversion results"""

    # Find sample images
    sample_images = []
    for split in ['train', 'valid']:
        images_dir = os.path.join(original_dataset, split, 'images')
        if os.path.exists(images_dir):
            images = [f for f in os.listdir(images_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            sample_images.extend([(split, img) for img in images[:2]])

    if not sample_images:
        print("‚ùå No images found for visualization")
        return

    # Select random samples
    selected_samples = random.sample(sample_images, min(num_samples, len(sample_images)))

    fig, axes = plt.subplots(len(selected_samples), 2, figsize=(15, 5*len(selected_samples)))
    if len(selected_samples) == 1:
        axes = axes.reshape(1, -1)

    for idx, (split, img_name) in enumerate(selected_samples):
        # Load image
        img_path = os.path.join(original_dataset, split, 'images', img_name)
        img = cv2.imread(img_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        # Load original polygon labels
        original_label = os.path.join(original_dataset, split, 'labels', img_name.replace('.jpg', '.txt').replace('.png', '.txt'))
        converted_label = os.path.join(converted_dataset, split, 'labels', img_name.replace('.jpg', '.txt').replace('.png', '.txt'))

        # Plot original with polygons
        ax1 = axes[idx, 0]
        ax1.imshow(img)
        ax1.set_title(f"Original Polygon Labels - {img_name}", fontsize=12)

        if os.path.exists(original_label):
            with open(original_label, 'r') as f:
                for line in f:
                    parts = line.strip().split()
                    if len(parts) >= 7:  # class_id + 6 coordinates minimum
                        class_id = int(parts[0])
                        polygon_points = [float(x) for x in parts[1:]]

                        # Convert to pixel coordinates
                        points = []
                        for i in range(0, len(polygon_points), 2):
                            x = polygon_points[i] * img.shape[1]
                            y = polygon_points[i + 1] * img.shape[0]
                            points.append([x, y])

                        # Draw polygon
                        polygon = patches.Polygon(points, linewidth=2, edgecolor='green', facecolor='none')
                        ax1.add_patch(polygon)

        # Plot converted with bounding boxes
        ax2 = axes[idx, 1]
        ax2.imshow(img)
        ax2.set_title(f"Converted BBox Labels - {img_name}", fontsize=12)

        if os.path.exists(converted_label):
            with open(converted_label, 'r') as f:
                for line in f:
                    parts = line.strip().split()
                    if len(parts) == 5:  # class_id + 4 bbox coordinates
                        class_id = int(parts[0])
                        x_center, y_center, width, height = [float(x) for x in parts[1:]]

                        # Convert to pixel coordinates
                        x_center *= img.shape[1]
                        y_center *= img.shape[0]
                        width *= img.shape[1]
                        height *= img.shape[0]

                        # Draw bounding box
                        rect = patches.Rectangle(
                            (x_center - width/2, y_center - height/2),
                            width, height,
                            linewidth=2, edgecolor='red', facecolor='none'
                        )
                        ax2.add_patch(rect)

        ax1.axis('off')
        ax2.axis('off')

    plt.tight_layout()
    plt.show()

# Visualize results
visualize_conversion(dataset_path, "/content/dataset_converted")

"""## ÔøΩÔøΩ Download Converted Dataset"""

# Create ZIP file of converted dataset
output_zip = "/content/converted_dataset.zip"
converted_dir = "/content/dataset_converted"

print(f"ÔøΩÔøΩ Creating ZIP file: {output_zip}")
shutil.make_archive(output_zip.replace('.zip', ''), 'zip', converted_dir)

print("‚úÖ ZIP file created successfully!")
print(f"üìÅ File size: {os.path.getsize(output_zip) / (1024*1024):.1f} MB")

# Download the file
print("\nüì• Downloading converted dataset...")
files.download(output_zip)

print("\nüéâ Conversion completed successfully!")
print("üí° You can now use the converted dataset for YOLO11 object detection training")

"""## ÔøΩÔøΩ Usage Instructions

### **Dataset Structure yang Diharapkan:**
```
dataset/
‚îú‚îÄ‚îÄ train/
‚îÇ   ‚îú‚îÄ‚îÄ images/
‚îÇ   ‚îî‚îÄ‚îÄ labels/
‚îú‚îÄ‚îÄ valid/
‚îÇ   ‚îú‚îÄ‚îÄ images/
‚îÇ   ‚îî‚îÄ‚îÄ labels/
‚îú‚îÄ‚îÄ test/
‚îÇ   ‚îú‚îÄ‚îÄ images/
‚îÇ   ‚îî‚îÄ‚îÄ labels/
‚îî‚îÄ‚îÄ data.yaml
```

### **Format Label Polygon (Input):**
```
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8  # class_id x1 y1 x2 y2 x3 y3 x4 y4
1 0.2 0.3 0.4 0.5 0.6 0.7          # class_id x1 y1 x2 y2 x3 y3
```

### **Format Label BBox (Output):**
```
0 0.25 0.3 0.4 0.5  # class_id x_center y_center width height
1 0.35 0.4 0.3 0.4  # class_id x_center y_center width height
```

### **Langkah-langkah:**
1. **Upload dataset ZIP** - Upload file ZIP yang berisi dataset YOLO11
2. **Check structure** - Verifikasi struktur dataset
3. **Run conversion** - Jalankan konversi polygon ke bbox
4. **Validate results** - Cek hasil konversi
5. **Visualize** - Lihat perbandingan visual
6. **Download** - Download dataset hasil konversi

### **Catatan:**
- ‚úÖ Semua koordinat dinormalisasi (0-1)
- ‚úÖ Class ID tetap sama
- ‚úÖ Struktur folder dipertahankan
- ‚úÖ data.yaml di-copy otomatis
- ‚úÖ Error handling untuk data corrupt
- ‚úÖ Statistik konversi detail
"""